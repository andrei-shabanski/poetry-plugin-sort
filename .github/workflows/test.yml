name: Test

on:
  push:
    branches:
      - "*"
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }} / v${{ matrix.poetry-version }}
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        os: [Ubuntu]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.12", "3.13"]
        poetry-version: ["1.2.2", "1.3.2", "1.4.2", "1.5.1", "1.6.1", "1.7.1", "1.8.4", "2.0.0"]
        include:
          - os: Ubuntu
            image: ubuntu-latest
      fail-fast: false
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo "version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")"

      - name: Bootstrap poetry
        run: curl -sL https://install.python-poetry.org | python - -y --version ${{ matrix.poetry-version }}

      - name: Update PATH
        if: ${{ matrix.os != 'Windows' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Path for Windows
        if: ${{ matrix.os == 'Windows' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Run mypy
        run: poetry run mypy -p poetry_plugin_sort

      - name: Run pytest
        run: poetry run pytest -v
